@model TwitterQuiz.ViewModels.Quiz.QuizPlayerViewModel

@{
    ViewBag.Title = "Player";
    Layout = "../Shared/_MasterLayout.cshtml";
}
@Html.HiddenFor(x => x.Usernamne, new { id = "username" });
<div class="row" id="player">
    <div class="col-md-12">
        <div class="form-group">
            <a href="@Url.Action("Play", "Quiz", new { id = Model.Id })">
                <h1>
                    @Model.Name
                    <span>@Model.Description</span>
                </h1>
            </a>
        </div>
        <div class="form-group">
            <a href="https://twitter.com/@Model.Usernamne" target="_blank">
                <h2 class="text-center">&#64;@Model.Usernamne</h2>
            </a>
        </div>
        <ul id="answers">
            
        </ul>
    </div>
</div>
<script id="round-template" type="text/x-handlebars-template">
    <div class="panel panel-default" id="round-{{round}}" class="panel panel-default">
        <div class="panel-heading">
            <h3>Round {{round}}</h3>
        </div>
        <div class="panel-body">
        </div>
    </div>
</script>
<script id="question-template" type="text/x-handlebars-template">
    <div  id="question-{{round}}-{{question}}">
        <div class="row">
            <div class="col-sm-4">
                <label class="control-label">Question {{question}}:</label>
            </div>
            <div class="col-sm-6">
                <label class="control-label">{{answer}}</label>
            </div>
        </div>
    </div>
</script>
@section Scripts
{
    <script type="text/javascript">
        var last;

        $(function() {
            var username = $('#username').val();
            last = "http://127.0.0.1:2113/streams/answers-" + username;
            getLatest(last);
        });

        var handleAtomResponse = function(data) {
            data.entries.forEach(function(item) {
                var itemUri = getNamedLink(item.links, "alternate");
                var addcallback = function() {
                };
                if (item.summary === "AnswerReceived") addcallback = addAnswer;
                if (addcallback) {
                    $.ajax({
                        headers: {
                            Accept: 'application/json',
                        },
                        url: itemUri,
                        success: addcallback
                    });
                }
            });

            var prev = getNamedLink(data.links, "previous");
            if (!prev) {
                prev = last;
            }
            if (prev != last) {
                last = prev;
            }
        };

        function addAnswer(data) {
            if ($('#round-' + data.round).length === 0) {
                var source = $("#round-template").html();
                var template = Handlebars.compile(source);
                var html = template(data);
                $('#answers').append(html);
                $(window).scrollTop($('#round-' + data.round).position().top);
            }
            if ($('#question-' + data.round + '-' + data.question).length === 0) {
                var source1 = $("#question-template").html();
                var template1 = Handlebars.compile(source1);
                var html1 = template1(data);
                $('#round-' + data.round + ' .panel-body').append(html1);
                $(window).scrollTop($('#round-' + data.round).position().top);
            }
        }
        
        function getLatest(uri) {
            console.log(uri);
            $.ajax({
                headers: {
                    Accept: 'application/json',
                },
                url: uri,
                success: function (data) {
                    last = getNamedLink(data.links, "last");
                    if (!last) {
                        last = getNamedLink(data.links, "self");
                    }
                    if (!last) {
                        last = uri;
                    }
                    setInterval(function () {
                        readPrevious(last);
                    }, 1000);
                },
                error: function () {
                    setTimeout(function () {
                        getLatest(last);
                    }, 1000);
                }
            });
        }
        function readPrevious(uri) {
            console.log(uri);
            $.ajax({
                headers: {
                    Accept: 'application/json',
                },
                url: uri,
                success: function (data) {
                    handleAtomResponse(data);
                }
            });
        }

        function getNamedLink(links, name) {
            for (var i = 0; i < links.length; i++) {
                if (links[i].relation == name) {
                    return links[i].uri;
                }
            }
        }
    </script>
}
